
F1_uart_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002144  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002250  08002250  00012250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002288  08002288  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002288  08002288  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002288  08002288  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002288  08002288  00012288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800228c  0800228c  0001228c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  0800229c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  0800229c  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ed7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013b1  00000000  00000000  00026f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000718  00000000  00000000  000282c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000670  00000000  00000000  000289d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f50  00000000  00000000  00029048  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005e52  00000000  00000000  0003ff98  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000849bc  00000000  00000000  00045dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca7a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c10  00000000  00000000  000ca824  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002238 	.word	0x08002238

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002238 	.word	0x08002238

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000152:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	uint8_t Rbuffer[BUFSIZE];

	uint8_t mcuready[] = "MCU_READY\n";
 8000154:	f107 0308 	add.w	r3, r7, #8
 8000158:	4a75      	ldr	r2, [pc, #468]	; (8000330 <main+0x1e4>)
 800015a:	ca07      	ldmia	r2, {r0, r1, r2}
 800015c:	c303      	stmia	r3!, {r0, r1}
 800015e:	801a      	strh	r2, [r3, #0]
 8000160:	3302      	adds	r3, #2
 8000162:	0c12      	lsrs	r2, r2, #16
 8000164:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000166:	f000 fba3 	bl	80008b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800016a:	f000 f8fd 	bl	8000368 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800016e:	f000 f9e5 	bl	800053c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000172:	f000 f9b9 	bl	80004e8 <MX_USART2_UART_Init>
	MX_CAN_Init();
 8000176:	f000 f939 	bl	80003ec <MX_CAN_Init>
	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 800017a:	486e      	ldr	r0, [pc, #440]	; (8000334 <main+0x1e8>)
 800017c:	f000 fdbe 	bl	8000cfc <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //last argument is mask of activated ITs just OR| them together
 8000180:	2102      	movs	r1, #2
 8000182:	486c      	ldr	r0, [pc, #432]	; (8000334 <main+0x1e8>)
 8000184:	f000 fed8 	bl	8000f38 <HAL_CAN_ActivateNotification>

	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000188:	4b6b      	ldr	r3, [pc, #428]	; (8000338 <main+0x1ec>)
 800018a:	2200      	movs	r2, #0
 800018c:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0x0;
 800018e:	4b6a      	ldr	r3, [pc, #424]	; (8000338 <main+0x1ec>)
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8000194:	4b68      	ldr	r3, [pc, #416]	; (8000338 <main+0x1ec>)
 8000196:	2200      	movs	r2, #0
 8000198:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0;	//11 highest bits of the mask are 1
 800019a:	4b67      	ldr	r3, [pc, #412]	; (8000338 <main+0x1ec>)
 800019c:	2200      	movs	r2, #0
 800019e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 80001a0:	4b65      	ldr	r3, [pc, #404]	; (8000338 <main+0x1ec>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001a6:	4b64      	ldr	r3, [pc, #400]	; (8000338 <main+0x1ec>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = DISABLE;
 80001ac:	4b62      	ldr	r3, [pc, #392]	; (8000338 <main+0x1ec>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001b2:	4b61      	ldr	r3, [pc, #388]	; (8000338 <main+0x1ec>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	619a      	str	r2, [r3, #24]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80001b8:	495f      	ldr	r1, [pc, #380]	; (8000338 <main+0x1ec>)
 80001ba:	485e      	ldr	r0, [pc, #376]	; (8000334 <main+0x1e8>)
 80001bc:	f000 fcd5 	bl	8000b6a <HAL_CAN_ConfigFilter>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
		// ASK FOR UPDATE DATA WITH MCU_READY
		if (HAL_UART_Transmit(&huart2, (uint8_t*) mcuready,
 80001c0:	f107 0108 	add.w	r1, r7, #8
 80001c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001c8:	220b      	movs	r2, #11
 80001ca:	485c      	ldr	r0, [pc, #368]	; (800033c <main+0x1f0>)
 80001cc:	f001 fdff 	bl	8001dce <HAL_UART_Transmit>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d005      	beq.n	80001e2 <main+0x96>
				(uint16_t) sizeof(mcuready),
				MY_TIMEOUT) != HAL_OK) {
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //TRANSMIT FAILED, TOGGLE PIN14 LED
 80001d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001da:	4859      	ldr	r0, [pc, #356]	; (8000340 <main+0x1f4>)
 80001dc:	f001 f952 	bl	8001484 <HAL_GPIO_TogglePin>
 80001e0:	e7ee      	b.n	80001c0 <main+0x74>
		} else {
			int Biter = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
			HAL_UART_Receive(&huart2, Rbuffer, sizeof(Rbuffer), MY_TIMEOUT); //RECEIVE NEW DATA
 80001e8:	f107 0114 	add.w	r1, r7, #20
 80001ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001f4:	4851      	ldr	r0, [pc, #324]	; (800033c <main+0x1f0>)
 80001f6:	f001 fe7c 	bl	8001ef2 <HAL_UART_Receive>
			memcpy(&mask, &Rbuffer[Biter], sizeof(mask)); // first 4 bytes of the Rbuffer is a mask which indicates what type of data is sent (update available)
 80001fa:	f107 0214 	add.w	r2, r7, #20
 80001fe:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8000202:	4413      	add	r3, r2
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	461a      	mov	r2, r3
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	601a      	str	r2, [r3, #0]
			Biter += sizeof(mask);
 800020c:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8000210:	3304      	adds	r3, #4
 8000212:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
			if ((mask & 0b00000001) >> 0) { // CASE: motion_packet
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f003 0301 	and.w	r3, r3, #1
 800021e:	2b00      	cmp	r3, #0
				memcpy(&my_motion_packet, &Rbuffer[Biter],
						sizeof(motion_packet));
				Biter += sizeof(motion_packet);
			}
			if ((mask & 0b00000010) >> 1) { // CASE: session_packet
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f003 0302 	and.w	r3, r3, #2
 8000228:	2b00      	cmp	r3, #0
 800022a:	d014      	beq.n	8000256 <main+0x10a>
				memcpy(&my_session_packet, &Rbuffer[Biter],
 800022c:	f107 0214 	add.w	r2, r7, #20
 8000230:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8000234:	4413      	add	r3, r2
 8000236:	781a      	ldrb	r2, [r3, #0]
 8000238:	4b42      	ldr	r3, [pc, #264]	; (8000344 <main+0x1f8>)
 800023a:	701a      	strb	r2, [r3, #0]
						sizeof(session_packet));
				Biter += sizeof(session_packet);
 800023c:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8000240:	3301      	adds	r3, #1
 8000242:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
				my_CAN_Transmit(&hcan, &TxHeaderDASHsession,
 8000246:	4b40      	ldr	r3, [pc, #256]	; (8000348 <main+0x1fc>)
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2301      	movs	r3, #1
 800024c:	4a3d      	ldr	r2, [pc, #244]	; (8000344 <main+0x1f8>)
 800024e:	493f      	ldr	r1, [pc, #252]	; (800034c <main+0x200>)
 8000250:	4838      	ldr	r0, [pc, #224]	; (8000334 <main+0x1e8>)
 8000252:	f000 f9f9 	bl	8000648 <my_CAN_Transmit>
						(uint8_t *) &my_session_packet,
						sizeof(my_session_packet), &TxMailbox);
			}
			if ((mask & 0b00000100) >> 2) { // CASE: lap_data_packet
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f003 0304 	and.w	r3, r3, #4
 800025e:	2b00      	cmp	r3, #0
 8000260:	d016      	beq.n	8000290 <main+0x144>
				memcpy(&my_lap_data_packet, &Rbuffer[Biter],
 8000262:	f107 0214 	add.w	r2, r7, #20
 8000266:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800026a:	441a      	add	r2, r3
 800026c:	4b38      	ldr	r3, [pc, #224]	; (8000350 <main+0x204>)
 800026e:	6811      	ldr	r1, [r2, #0]
 8000270:	6019      	str	r1, [r3, #0]
 8000272:	8892      	ldrh	r2, [r2, #4]
 8000274:	809a      	strh	r2, [r3, #4]
						sizeof(lap_data_packet));
				Biter += sizeof(lap_data_packet);
 8000276:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800027a:	3306      	adds	r3, #6
 800027c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
				my_CAN_Transmit(&hcan, &TxHeaderDASHlap,
 8000280:	4b31      	ldr	r3, [pc, #196]	; (8000348 <main+0x1fc>)
 8000282:	9300      	str	r3, [sp, #0]
 8000284:	2306      	movs	r3, #6
 8000286:	4a32      	ldr	r2, [pc, #200]	; (8000350 <main+0x204>)
 8000288:	4932      	ldr	r1, [pc, #200]	; (8000354 <main+0x208>)
 800028a:	482a      	ldr	r0, [pc, #168]	; (8000334 <main+0x1e8>)
 800028c:	f000 f9dc 	bl	8000648 <my_CAN_Transmit>
						(uint8_t *) &my_lap_data_packet,
						sizeof(my_lap_data_packet), &TxMailbox);
			}
			if ((mask & 0b00001000) >> 3) { // CASE: event_packet
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f003 0308 	and.w	r3, r3, #8
 8000298:	2b00      	cmp	r3, #0
				memcpy(&my_session_packet, &Rbuffer[Biter],
						sizeof(event_packet));
				Biter += sizeof(event_packet);
			}
			if ((mask & 0b00010000) >> 4) { // CASE: participants_packet
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f003 0310 	and.w	r3, r3, #16
 80002a2:	2b00      	cmp	r3, #0
				memcpy(&my_participants_packet, &Rbuffer[Biter],
						sizeof(participants_packet));
				Biter += sizeof(participants_packet);
			}
			if ((mask & 0b00100000) >> 5) { // CASE: car_setups_packet
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f003 0320 	and.w	r3, r3, #32
 80002ac:	2b00      	cmp	r3, #0
				memcpy(&my_car_setups_packet, &Rbuffer[Biter],
						sizeof(car_setups_packet));
				Biter += sizeof(car_setups_packet);
			}
			if ((mask & 0b01000000) >> 6) { // CASE: car_telemetry_packet
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d01b      	beq.n	80002f2 <main+0x1a6>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15); //DEBUG
 80002ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002be:	4820      	ldr	r0, [pc, #128]	; (8000340 <main+0x1f4>)
 80002c0:	f001 f8e0 	bl	8001484 <HAL_GPIO_TogglePin>
				memcpy(&my_car_telemetry_packet, &Rbuffer[Biter],
 80002c4:	f107 0214 	add.w	r2, r7, #20
 80002c8:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80002cc:	441a      	add	r2, r3
 80002ce:	4b22      	ldr	r3, [pc, #136]	; (8000358 <main+0x20c>)
 80002d0:	6811      	ldr	r1, [r2, #0]
 80002d2:	6019      	str	r1, [r3, #0]
 80002d4:	7912      	ldrb	r2, [r2, #4]
 80002d6:	711a      	strb	r2, [r3, #4]
						sizeof(car_telemetry_packet));
				Biter += sizeof(car_telemetry_packet);
 80002d8:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80002dc:	3305      	adds	r3, #5
 80002de:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
				my_CAN_Transmit(&hcan, &TxHeaderDASHcartelemetry,
 80002e2:	4b19      	ldr	r3, [pc, #100]	; (8000348 <main+0x1fc>)
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	2305      	movs	r3, #5
 80002e8:	4a1b      	ldr	r2, [pc, #108]	; (8000358 <main+0x20c>)
 80002ea:	491c      	ldr	r1, [pc, #112]	; (800035c <main+0x210>)
 80002ec:	4811      	ldr	r0, [pc, #68]	; (8000334 <main+0x1e8>)
 80002ee:	f000 f9ab 	bl	8000648 <my_CAN_Transmit>
						(uint8_t *) &my_car_telemetry_packet,
						sizeof(my_car_telemetry_packet), &TxMailbox);
			}
			if ((mask & 0b10000000) >> 7) { // CASE: car_status_packet
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f43f af60 	beq.w	80001c0 <main+0x74>
				memcpy(&my_car_status_packet, &Rbuffer[Biter],
 8000300:	f107 0214 	add.w	r2, r7, #20
 8000304:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8000308:	441a      	add	r2, r3
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <main+0x214>)
 800030c:	6811      	ldr	r1, [r2, #0]
 800030e:	6852      	ldr	r2, [r2, #4]
 8000310:	6019      	str	r1, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
						sizeof(car_status_packet));
				Biter += sizeof(car_status_packet);
 8000314:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8000318:	3308      	adds	r3, #8
 800031a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
				my_CAN_Transmit(&hcan, &TxHeaderDASHcarstatus,
 800031e:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <main+0x1fc>)
 8000320:	9300      	str	r3, [sp, #0]
 8000322:	2308      	movs	r3, #8
 8000324:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <main+0x214>)
 8000326:	490f      	ldr	r1, [pc, #60]	; (8000364 <main+0x218>)
 8000328:	4802      	ldr	r0, [pc, #8]	; (8000334 <main+0x1e8>)
 800032a:	f000 f98d 	bl	8000648 <my_CAN_Transmit>
		if (HAL_UART_Transmit(&huart2, (uint8_t*) mcuready,
 800032e:	e747      	b.n	80001c0 <main+0x74>
 8000330:	08002250 	.word	0x08002250
 8000334:	200000ac 	.word	0x200000ac
 8000338:	20000028 	.word	0x20000028
 800033c:	200000f8 	.word	0x200000f8
 8000340:	40010c00 	.word	0x40010c00
 8000344:	20000058 	.word	0x20000058
 8000348:	200000f4 	.word	0x200000f4
 800034c:	2000007c 	.word	0x2000007c
 8000350:	200000ec 	.word	0x200000ec
 8000354:	2000005c 	.word	0x2000005c
 8000358:	20000074 	.word	0x20000074
 800035c:	20000094 	.word	0x20000094
 8000360:	20000050 	.word	0x20000050
 8000364:	200000d4 	.word	0x200000d4

08000368 <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b090      	sub	sp, #64	; 0x40
 800036c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	2228      	movs	r2, #40	; 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f001 ff56 	bl	8002228 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038a:	2302      	movs	r3, #2
 800038c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038e:	2301      	movs	r3, #1
 8000390:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000392:	2310      	movs	r3, #16
 8000394:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000396:	2302      	movs	r3, #2
 8000398:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800039a:	2300      	movs	r3, #0
 800039c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800039e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003a4:	f107 0318 	add.w	r3, r7, #24
 80003a8:	4618      	mov	r0, r3
 80003aa:	f001 f8a7 	bl	80014fc <HAL_RCC_OscConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x50>
		Error_Handler();
 80003b4:	f000 f960 	bl	8000678 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003b8:	230f      	movs	r3, #15
 80003ba:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003bc:	2302      	movs	r3, #2
 80003be:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2102      	movs	r1, #2
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 fb12 	bl	80019fc <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x7a>
		Error_Handler();
 80003de:	f000 f94b 	bl	8000678 <Error_Handler>
	}
}
 80003e2:	bf00      	nop
 80003e4:	3740      	adds	r7, #64	; 0x40
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 80003f0:	4b37      	ldr	r3, [pc, #220]	; (80004d0 <MX_CAN_Init+0xe4>)
 80003f2:	4a38      	ldr	r2, [pc, #224]	; (80004d4 <MX_CAN_Init+0xe8>)
 80003f4:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 21;
 80003f6:	4b36      	ldr	r3, [pc, #216]	; (80004d0 <MX_CAN_Init+0xe4>)
 80003f8:	2215      	movs	r2, #21
 80003fa:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80003fc:	4b34      	ldr	r3, [pc, #208]	; (80004d0 <MX_CAN_Init+0xe4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000402:	4b33      	ldr	r3, [pc, #204]	; (80004d0 <MX_CAN_Init+0xe4>)
 8000404:	2200      	movs	r2, #0
 8000406:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000408:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <MX_CAN_Init+0xe4>)
 800040a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800040e:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000410:	4b2f      	ldr	r3, [pc, #188]	; (80004d0 <MX_CAN_Init+0xe4>)
 8000412:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000416:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000418:	4b2d      	ldr	r3, [pc, #180]	; (80004d0 <MX_CAN_Init+0xe4>)
 800041a:	2200      	movs	r2, #0
 800041c:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800041e:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <MX_CAN_Init+0xe4>)
 8000420:	2200      	movs	r2, #0
 8000422:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000424:	4b2a      	ldr	r3, [pc, #168]	; (80004d0 <MX_CAN_Init+0xe4>)
 8000426:	2200      	movs	r2, #0
 8000428:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800042a:	4b29      	ldr	r3, [pc, #164]	; (80004d0 <MX_CAN_Init+0xe4>)
 800042c:	2200      	movs	r2, #0
 800042e:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000430:	4b27      	ldr	r3, [pc, #156]	; (80004d0 <MX_CAN_Init+0xe4>)
 8000432:	2200      	movs	r2, #0
 8000434:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000436:	4b26      	ldr	r3, [pc, #152]	; (80004d0 <MX_CAN_Init+0xe4>)
 8000438:	2200      	movs	r2, #0
 800043a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 800043c:	4824      	ldr	r0, [pc, #144]	; (80004d0 <MX_CAN_Init+0xe4>)
 800043e:	f000 fa99 	bl	8000974 <HAL_CAN_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_CAN_Init+0x60>
		Error_Handler();
 8000448:	f000 f916 	bl	8000678 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	TxHeaderDASHsession.DLC = 8;		//data length in bytes, max 8
 800044c:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <MX_CAN_Init+0xec>)
 800044e:	2208      	movs	r2, #8
 8000450:	611a      	str	r2, [r3, #16]
	TxHeaderDASHsession.IDE = CAN_ID_EXT;	// specifies if standard or extended IDs are used
 8000452:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <MX_CAN_Init+0xec>)
 8000454:	2204      	movs	r2, #4
 8000456:	609a      	str	r2, [r3, #8]
	TxHeaderDASHsession.StdId = sessionID<<5|DASHBOARD; // first part of MY OWN ID so this specifies the SOURCE of the message
 8000458:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <MX_CAN_Init+0xec>)
 800045a:	2220      	movs	r2, #32
 800045c:	601a      	str	r2, [r3, #0]
	TxHeaderDASHsession.ExtId = 0x0; // second part, ask Wouter Burns if 11 bit can IDs are enough
 800045e:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <MX_CAN_Init+0xec>)
 8000460:	2200      	movs	r2, #0
 8000462:	605a      	str	r2, [r3, #4]
	TxHeaderDASHsession.RTR = CAN_RTR_DATA; // type of data, RTR means normal bytes, can also be commands etc
 8000464:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <MX_CAN_Init+0xec>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]

	TxHeaderDASHlap.DLC = 8;
 800046a:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <MX_CAN_Init+0xf0>)
 800046c:	2208      	movs	r2, #8
 800046e:	611a      	str	r2, [r3, #16]
	TxHeaderDASHlap.IDE = CAN_ID_EXT;
 8000470:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <MX_CAN_Init+0xf0>)
 8000472:	2204      	movs	r2, #4
 8000474:	609a      	str	r2, [r3, #8]
	TxHeaderDASHlap.StdId = lapID<<5|DASHBOARD;
 8000476:	4b19      	ldr	r3, [pc, #100]	; (80004dc <MX_CAN_Init+0xf0>)
 8000478:	2240      	movs	r2, #64	; 0x40
 800047a:	601a      	str	r2, [r3, #0]
	TxHeaderDASHlap.ExtId = 0;
 800047c:	4b17      	ldr	r3, [pc, #92]	; (80004dc <MX_CAN_Init+0xf0>)
 800047e:	2200      	movs	r2, #0
 8000480:	605a      	str	r2, [r3, #4]
	TxHeaderDASHlap.RTR = CAN_RTR_DATA;
 8000482:	4b16      	ldr	r3, [pc, #88]	; (80004dc <MX_CAN_Init+0xf0>)
 8000484:	2200      	movs	r2, #0
 8000486:	60da      	str	r2, [r3, #12]

	TxHeaderDASHcartelemetry.DLC = 8;
 8000488:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <MX_CAN_Init+0xf4>)
 800048a:	2208      	movs	r2, #8
 800048c:	611a      	str	r2, [r3, #16]
	TxHeaderDASHcartelemetry.IDE = CAN_ID_EXT;
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <MX_CAN_Init+0xf4>)
 8000490:	2204      	movs	r2, #4
 8000492:	609a      	str	r2, [r3, #8]
	TxHeaderDASHcartelemetry.StdId = car_telemetryID<<5|DASHBOARD;
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <MX_CAN_Init+0xf4>)
 8000496:	22c0      	movs	r2, #192	; 0xc0
 8000498:	601a      	str	r2, [r3, #0]
	TxHeaderDASHcartelemetry.ExtId = 0;
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_CAN_Init+0xf4>)
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]
	TxHeaderDASHcartelemetry.RTR = CAN_RTR_DATA;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <MX_CAN_Init+0xf4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]

	TxHeaderDASHcarstatus.DLC = 8;
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_CAN_Init+0xf8>)
 80004a8:	2208      	movs	r2, #8
 80004aa:	611a      	str	r2, [r3, #16]
	TxHeaderDASHcarstatus.IDE = CAN_ID_EXT;
 80004ac:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <MX_CAN_Init+0xf8>)
 80004ae:	2204      	movs	r2, #4
 80004b0:	609a      	str	r2, [r3, #8]
	TxHeaderDASHcarstatus.StdId = car_statusID<<5|DASHBOARD;
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_CAN_Init+0xf8>)
 80004b4:	22e0      	movs	r2, #224	; 0xe0
 80004b6:	601a      	str	r2, [r3, #0]
	TxHeaderDASHcarstatus.ExtId = 0;
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <MX_CAN_Init+0xf8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
	TxHeaderDASHcarstatus.RTR = CAN_RTR_DATA;
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_CAN_Init+0xf8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]
	HAL_CAN_Start(&hcan);
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <MX_CAN_Init+0xe4>)
 80004c6:	f000 fc19 	bl	8000cfc <HAL_CAN_Start>
	/* USER CODE END CAN_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200000ac 	.word	0x200000ac
 80004d4:	40006400 	.word	0x40006400
 80004d8:	2000007c 	.word	0x2000007c
 80004dc:	2000005c 	.word	0x2000005c
 80004e0:	20000094 	.word	0x20000094
 80004e4:	200000d4 	.word	0x200000d4

080004e8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 80004ee:	4a12      	ldr	r2, [pc, #72]	; (8000538 <MX_USART2_UART_Init+0x50>)
 80004f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 80004f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 800050e:	220c      	movs	r2, #12
 8000510:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 8000520:	f001 fc08 	bl	8001d34 <HAL_UART_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800052a:	f000 f8a5 	bl	8000678 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200000f8 	.word	0x200000f8
 8000538:	40004400 	.word	0x40004400

0800053c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000550:	4b38      	ldr	r3, [pc, #224]	; (8000634 <MX_GPIO_Init+0xf8>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a37      	ldr	r2, [pc, #220]	; (8000634 <MX_GPIO_Init+0xf8>)
 8000556:	f043 0310 	orr.w	r3, r3, #16
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b35      	ldr	r3, [pc, #212]	; (8000634 <MX_GPIO_Init+0xf8>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0310 	and.w	r3, r3, #16
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000568:	4b32      	ldr	r3, [pc, #200]	; (8000634 <MX_GPIO_Init+0xf8>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a31      	ldr	r2, [pc, #196]	; (8000634 <MX_GPIO_Init+0xf8>)
 800056e:	f043 0320 	orr.w	r3, r3, #32
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <MX_GPIO_Init+0xf8>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0320 	and.w	r3, r3, #32
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <MX_GPIO_Init+0xf8>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <MX_GPIO_Init+0xf8>)
 8000586:	f043 0304 	orr.w	r3, r3, #4
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b29      	ldr	r3, [pc, #164]	; (8000634 <MX_GPIO_Init+0xf8>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0304 	and.w	r3, r3, #4
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000598:	4b26      	ldr	r3, [pc, #152]	; (8000634 <MX_GPIO_Init+0xf8>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a25      	ldr	r2, [pc, #148]	; (8000634 <MX_GPIO_Init+0xf8>)
 800059e:	f043 0308 	orr.w	r3, r3, #8
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <MX_GPIO_Init+0xf8>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0308 	and.w	r3, r3, #8
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	4820      	ldr	r0, [pc, #128]	; (8000638 <MX_GPIO_Init+0xfc>)
 80005b6:	f000 ff4d 	bl	8001454 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80005c0:	481e      	ldr	r0, [pc, #120]	; (800063c <MX_GPIO_Init+0x100>)
 80005c2:	f000 ff47 	bl	8001454 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80005c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <MX_GPIO_Init+0x104>)
 80005ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	481a      	ldr	r0, [pc, #104]	; (8000644 <MX_GPIO_Init+0x108>)
 80005dc:	f000 fde0 	bl	80011a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80005e0:	2320      	movs	r3, #32
 80005e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2302      	movs	r3, #2
 80005ee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	4619      	mov	r1, r3
 80005f6:	4810      	ldr	r0, [pc, #64]	; (8000638 <MX_GPIO_Init+0xfc>)
 80005f8:	f000 fdd2 	bl	80011a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80005fc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000600:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2302      	movs	r3, #2
 800060c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	4809      	ldr	r0, [pc, #36]	; (800063c <MX_GPIO_Init+0x100>)
 8000616:	f000 fdc3 	bl	80011a0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	2028      	movs	r0, #40	; 0x28
 8000620:	f000 fd87 	bl	8001132 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000624:	2028      	movs	r0, #40	; 0x28
 8000626:	f000 fda0 	bl	800116a <HAL_NVIC_EnableIRQ>

}
 800062a:	bf00      	nop
 800062c:	3720      	adds	r7, #32
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000
 8000638:	40010800 	.word	0x40010800
 800063c:	40010c00 	.word	0x40010c00
 8000640:	10110000 	.word	0x10110000
 8000644:	40011000 	.word	0x40011000

08000648 <my_CAN_Transmit>:
/* USER CODE BEGIN 4 */
/**
 * My fuction for transmitting structures of variable size over CAN
 */
void my_CAN_Transmit(CAN_HandleTypeDef *canheader, CAN_TxHeaderTypeDef *pHeader,
		uint8_t aData[], uint16_t dataSize, uint32_t *pTxMailbox) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	807b      	strh	r3, [r7, #2]
	if (dataSize > pHeader->DLC) {
 8000656:	887a      	ldrh	r2, [r7, #2]
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	691b      	ldr	r3, [r3, #16]
 800065c:	429a      	cmp	r2, r3
 800065e:	d901      	bls.n	8000664 <my_CAN_Transmit+0x1c>
		Error_Handler();
 8000660:	f000 f80a 	bl	8000678 <Error_Handler>
	}
	HAL_CAN_AddTxMessage(canheader, pHeader, aData, pTxMailbox);
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	68b9      	ldr	r1, [r7, #8]
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f000 fb8a 	bl	8000d84 <HAL_CAN_AddTxMessage>
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <Error_Handler>:

/**
 * @brief  This functioappn is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800067e:	e7fe      	b.n	800067e <Error_Handler+0x6>

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_MspInit+0x5c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <HAL_MspInit+0x5c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_MspInit+0x5c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_MspInit+0x5c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <HAL_MspInit+0x5c>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_MspInit+0x5c>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_MspInit+0x60>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_MspInit+0x60>)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010000 	.word	0x40010000

080006e4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <HAL_CAN_MspInit+0x8c>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d131      	bne.n	8000768 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <HAL_CAN_MspInit+0x90>)
 8000706:	69db      	ldr	r3, [r3, #28]
 8000708:	4a1a      	ldr	r2, [pc, #104]	; (8000774 <HAL_CAN_MspInit+0x90>)
 800070a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800070e:	61d3      	str	r3, [r2, #28]
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_CAN_MspInit+0x90>)
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_CAN_MspInit+0x90>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a14      	ldr	r2, [pc, #80]	; (8000774 <HAL_CAN_MspInit+0x90>)
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_CAN_MspInit+0x90>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000738:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	4619      	mov	r1, r3
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <HAL_CAN_MspInit+0x94>)
 800074a:	f000 fd29 	bl	80011a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000758:	2303      	movs	r3, #3
 800075a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4619      	mov	r1, r3
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <HAL_CAN_MspInit+0x94>)
 8000764:	f000 fd1c 	bl	80011a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40006400 	.word	0x40006400
 8000774:	40021000 	.word	0x40021000
 8000778:	40010800 	.word	0x40010800

0800077c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a15      	ldr	r2, [pc, #84]	; (80007ec <HAL_UART_MspInit+0x70>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d123      	bne.n	80007e4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_UART_MspInit+0x74>)
 800079e:	69db      	ldr	r3, [r3, #28]
 80007a0:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <HAL_UART_MspInit+0x74>)
 80007a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a6:	61d3      	str	r3, [r2, #28]
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_UART_MspInit+0x74>)
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_UART_MspInit+0x74>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <HAL_UART_MspInit+0x74>)
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <HAL_UART_MspInit+0x74>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007cc:	230c      	movs	r3, #12
 80007ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2302      	movs	r3, #2
 80007d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4619      	mov	r1, r3
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <HAL_UART_MspInit+0x78>)
 80007e0:	f000 fcde 	bl	80011a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40004400 	.word	0x40004400
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40010800 	.word	0x40010800

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler+0x4>

080007fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <MemManage_Handler+0x4>

0800080a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <UsageFault_Handler+0x4>

08000816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr

0800083a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083e:	f000 f87d 	bl	800093c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}

08000846 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800084a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800084e:	f000 fe33 	bl	80014b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000858:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800085a:	e003      	b.n	8000864 <LoopCopyDataInit>

0800085c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800085e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000860:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000862:	3104      	adds	r1, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000864:	480a      	ldr	r0, [pc, #40]	; (8000890 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000868:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800086a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800086c:	d3f6      	bcc.n	800085c <CopyDataInit>
  ldr r2, =_sbss
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000870:	e002      	b.n	8000878 <LoopFillZerobss>

08000872 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000874:	f842 3b04 	str.w	r3, [r2], #4

08000878 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800087a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800087c:	d3f9      	bcc.n	8000872 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800087e:	f000 f810 	bl	80008a2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000882:	f001 fcad 	bl	80021e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000886:	f7ff fc61 	bl	800014c <main>
  bx lr
 800088a:	4770      	bx	lr
  ldr r3, =_sidata
 800088c:	08002290 	.word	0x08002290
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000894:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000898:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800089c:	2000013c 	.word	0x2000013c

080008a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_2_IRQHandler>

080008a2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
	...

080008b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_Init+0x28>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <HAL_Init+0x28>)
 80008ba:	f043 0310 	orr.w	r3, r3, #16
 80008be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c0:	2003      	movs	r0, #3
 80008c2:	f000 fc2b 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 f808 	bl	80008dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008cc:	f7ff fed8 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40022000 	.word	0x40022000

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x54>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x58>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4619      	mov	r1, r3
 80008ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fc43 	bl	8001186 <HAL_SYSTICK_Config>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e00e      	b.n	8000928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b0f      	cmp	r3, #15
 800090e:	d80a      	bhi.n	8000926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000910:	2200      	movs	r2, #0
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	f000 fc0b 	bl	8001132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <HAL_InitTick+0x5c>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000922:	2300      	movs	r3, #0
 8000924:	e000      	b.n	8000928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000000 	.word	0x20000000
 8000934:	20000008 	.word	0x20000008
 8000938:	20000004 	.word	0x20000004

0800093c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_IncTick+0x1c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_IncTick+0x20>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4413      	add	r3, r2
 800094c:	4a03      	ldr	r2, [pc, #12]	; (800095c <HAL_IncTick+0x20>)
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	20000008 	.word	0x20000008
 800095c:	20000138 	.word	0x20000138

08000960 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return uwTick;
 8000964:	4b02      	ldr	r3, [pc, #8]	; (8000970 <HAL_GetTick+0x10>)
 8000966:	681b      	ldr	r3, [r3, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	20000138 	.word	0x20000138

08000974 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d101      	bne.n	8000986 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e0ed      	b.n	8000b62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d102      	bne.n	8000998 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff fea6 	bl	80006e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f022 0202 	bic.w	r2, r2, #2
 80009a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009a8:	f7ff ffda 	bl	8000960 <HAL_GetTick>
 80009ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009ae:	e012      	b.n	80009d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009b0:	f7ff ffd6 	bl	8000960 <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	2b0a      	cmp	r3, #10
 80009bc:	d90b      	bls.n	80009d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2205      	movs	r2, #5
 80009ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e0c5      	b.n	8000b62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1e5      	bne.n	80009b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f042 0201 	orr.w	r2, r2, #1
 80009f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009f4:	f7ff ffb4 	bl	8000960 <HAL_GetTick>
 80009f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009fa:	e012      	b.n	8000a22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009fc:	f7ff ffb0 	bl	8000960 <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	2b0a      	cmp	r3, #10
 8000a08:	d90b      	bls.n	8000a22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2205      	movs	r2, #5
 8000a1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e09f      	b.n	8000b62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d0e5      	beq.n	80009fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	7e1b      	ldrb	r3, [r3, #24]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d108      	bne.n	8000a4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	e007      	b.n	8000a5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	7e5b      	ldrb	r3, [r3, #25]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d108      	bne.n	8000a74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	e007      	b.n	8000a84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	7e9b      	ldrb	r3, [r3, #26]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d108      	bne.n	8000a9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f042 0220 	orr.w	r2, r2, #32
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	e007      	b.n	8000aae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f022 0220 	bic.w	r2, r2, #32
 8000aac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	7edb      	ldrb	r3, [r3, #27]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d108      	bne.n	8000ac8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f022 0210 	bic.w	r2, r2, #16
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	e007      	b.n	8000ad8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f042 0210 	orr.w	r2, r2, #16
 8000ad6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	7f1b      	ldrb	r3, [r3, #28]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d108      	bne.n	8000af2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f042 0208 	orr.w	r2, r2, #8
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	e007      	b.n	8000b02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f022 0208 	bic.w	r2, r2, #8
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	7f5b      	ldrb	r3, [r3, #29]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d108      	bne.n	8000b1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f042 0204 	orr.w	r2, r2, #4
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	e007      	b.n	8000b2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f022 0204 	bic.w	r2, r2, #4
 8000b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	431a      	orrs	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	ea42 0103 	orr.w	r1, r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	1e5a      	subs	r2, r3, #1
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b087      	sub	sp, #28
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b80:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b82:	7cfb      	ldrb	r3, [r7, #19]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d003      	beq.n	8000b90 <HAL_CAN_ConfigFilter+0x26>
 8000b88:	7cfb      	ldrb	r3, [r7, #19]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	f040 80aa 	bne.w	8000ce4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b96:	f043 0201 	orr.w	r2, r3, #1
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	2201      	movs	r2, #1
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d123      	bne.n	8000c12 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3248      	adds	r2, #72	; 0x48
 8000bf2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c06:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c08:	6979      	ldr	r1, [r7, #20]
 8000c0a:	3348      	adds	r3, #72	; 0x48
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	440b      	add	r3, r1
 8000c10:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d122      	bne.n	8000c60 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	431a      	orrs	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3248      	adds	r2, #72	; 0x48
 8000c40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c56:	6979      	ldr	r1, [r7, #20]
 8000c58:	3348      	adds	r3, #72	; 0x48
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	440b      	add	r3, r1
 8000c5e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d109      	bne.n	8000c7c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000c7a:	e007      	b.n	8000c8c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	431a      	orrs	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d109      	bne.n	8000ca8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000ca6:	e007      	b.n	8000cb8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	6a1b      	ldr	r3, [r3, #32]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d107      	bne.n	8000cd0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cd6:	f023 0201 	bic.w	r2, r3, #1
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	e006      	b.n	8000cf2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
  }
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d12e      	bne.n	8000d6e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2202      	movs	r2, #2
 8000d14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 0201 	bic.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d28:	f7ff fe1a 	bl	8000960 <HAL_GetTick>
 8000d2c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d2e:	e012      	b.n	8000d56 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d30:	f7ff fe16 	bl	8000960 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b0a      	cmp	r3, #10
 8000d3c:	d90b      	bls.n	8000d56 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2205      	movs	r2, #5
 8000d4e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e012      	b.n	8000d7c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1e5      	bne.n	8000d30 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e006      	b.n	8000d7c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d72:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
  }
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d98:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000da2:	7ffb      	ldrb	r3, [r7, #31]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d003      	beq.n	8000db0 <HAL_CAN_AddTxMessage+0x2c>
 8000da8:	7ffb      	ldrb	r3, [r7, #31]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	f040 80b8 	bne.w	8000f20 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10a      	bne.n	8000dd0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d105      	bne.n	8000dd0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 80a0 	beq.w	8000f10 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	0e1b      	lsrs	r3, r3, #24
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d907      	bls.n	8000df0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e09e      	b.n	8000f2e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000df0:	2201      	movs	r2, #1
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	409a      	lsls	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10d      	bne.n	8000e1e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e0c:	68f9      	ldr	r1, [r7, #12]
 8000e0e:	6809      	ldr	r1, [r1, #0]
 8000e10:	431a      	orrs	r2, r3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3318      	adds	r3, #24
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	440b      	add	r3, r1
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e00f      	b.n	8000e3e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e28:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e2e:	68f9      	ldr	r1, [r7, #12]
 8000e30:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e32:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3318      	adds	r3, #24
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	440b      	add	r3, r1
 8000e3c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	6819      	ldr	r1, [r3, #0]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	691a      	ldr	r2, [r3, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3318      	adds	r3, #24
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	440b      	add	r3, r1
 8000e4e:	3304      	adds	r3, #4
 8000e50:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	7d1b      	ldrb	r3, [r3, #20]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d111      	bne.n	8000e7e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3318      	adds	r3, #24
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	4413      	add	r3, r2
 8000e66:	3304      	adds	r3, #4
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	6811      	ldr	r1, [r2, #0]
 8000e6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3318      	adds	r3, #24
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	440b      	add	r3, r1
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3307      	adds	r3, #7
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	061a      	lsls	r2, r3, #24
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3306      	adds	r3, #6
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	041b      	lsls	r3, r3, #16
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3305      	adds	r3, #5
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	021b      	lsls	r3, r3, #8
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	3204      	adds	r2, #4
 8000e9e:	7812      	ldrb	r2, [r2, #0]
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	6811      	ldr	r1, [r2, #0]
 8000ea6:	ea43 0200 	orr.w	r2, r3, r0
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	440b      	add	r3, r1
 8000eb0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000eb4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3303      	adds	r3, #3
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	061a      	lsls	r2, r3, #24
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	041b      	lsls	r3, r3, #16
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	7812      	ldrb	r2, [r2, #0]
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	6811      	ldr	r1, [r2, #0]
 8000edc:	ea43 0200 	orr.w	r2, r3, r0
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	440b      	add	r3, r1
 8000ee6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000eea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3318      	adds	r3, #24
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	4413      	add	r3, r2
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	6811      	ldr	r1, [r2, #0]
 8000efe:	f043 0201 	orr.w	r2, r3, #1
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3318      	adds	r3, #24
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	440b      	add	r3, r1
 8000f0a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e00e      	b.n	8000f2e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e006      	b.n	8000f2e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
  }
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f48:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d002      	beq.n	8000f56 <HAL_CAN_ActivateNotification+0x1e>
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d109      	bne.n	8000f6a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6959      	ldr	r1, [r3, #20]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e006      	b.n	8000f78 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
  }
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
	...

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4906      	ldr	r1, [pc, #24]	; (800101c <__NVIC_EnableIRQ+0x34>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f7ff ff90 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff2d 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001144:	f7ff ff42 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff ff90 	bl	8001074 <NVIC_EncodePriority>
 8001154:	4602      	mov	r2, r0
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff5f 	bl	8001020 <__NVIC_SetPriority>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff35 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffa2 	bl	80010d8 <SysTick_Config>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b08b      	sub	sp, #44	; 0x2c
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b2:	e127      	b.n	8001404 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011b4:	2201      	movs	r2, #1
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	f040 8116 	bne.w	80013fe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b12      	cmp	r3, #18
 80011d8:	d034      	beq.n	8001244 <HAL_GPIO_Init+0xa4>
 80011da:	2b12      	cmp	r3, #18
 80011dc:	d80d      	bhi.n	80011fa <HAL_GPIO_Init+0x5a>
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d02b      	beq.n	800123a <HAL_GPIO_Init+0x9a>
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d804      	bhi.n	80011f0 <HAL_GPIO_Init+0x50>
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d031      	beq.n	800124e <HAL_GPIO_Init+0xae>
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d01c      	beq.n	8001228 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ee:	e048      	b.n	8001282 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d043      	beq.n	800127c <HAL_GPIO_Init+0xdc>
 80011f4:	2b11      	cmp	r3, #17
 80011f6:	d01b      	beq.n	8001230 <HAL_GPIO_Init+0x90>
          break;
 80011f8:	e043      	b.n	8001282 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011fa:	4a89      	ldr	r2, [pc, #548]	; (8001420 <HAL_GPIO_Init+0x280>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d026      	beq.n	800124e <HAL_GPIO_Init+0xae>
 8001200:	4a87      	ldr	r2, [pc, #540]	; (8001420 <HAL_GPIO_Init+0x280>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d806      	bhi.n	8001214 <HAL_GPIO_Init+0x74>
 8001206:	4a87      	ldr	r2, [pc, #540]	; (8001424 <HAL_GPIO_Init+0x284>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d020      	beq.n	800124e <HAL_GPIO_Init+0xae>
 800120c:	4a86      	ldr	r2, [pc, #536]	; (8001428 <HAL_GPIO_Init+0x288>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d01d      	beq.n	800124e <HAL_GPIO_Init+0xae>
          break;
 8001212:	e036      	b.n	8001282 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001214:	4a85      	ldr	r2, [pc, #532]	; (800142c <HAL_GPIO_Init+0x28c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d019      	beq.n	800124e <HAL_GPIO_Init+0xae>
 800121a:	4a85      	ldr	r2, [pc, #532]	; (8001430 <HAL_GPIO_Init+0x290>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d016      	beq.n	800124e <HAL_GPIO_Init+0xae>
 8001220:	4a84      	ldr	r2, [pc, #528]	; (8001434 <HAL_GPIO_Init+0x294>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0xae>
          break;
 8001226:	e02c      	b.n	8001282 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	623b      	str	r3, [r7, #32]
          break;
 800122e:	e028      	b.n	8001282 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	3304      	adds	r3, #4
 8001236:	623b      	str	r3, [r7, #32]
          break;
 8001238:	e023      	b.n	8001282 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	3308      	adds	r3, #8
 8001240:	623b      	str	r3, [r7, #32]
          break;
 8001242:	e01e      	b.n	8001282 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	330c      	adds	r3, #12
 800124a:	623b      	str	r3, [r7, #32]
          break;
 800124c:	e019      	b.n	8001282 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001256:	2304      	movs	r3, #4
 8001258:	623b      	str	r3, [r7, #32]
          break;
 800125a:	e012      	b.n	8001282 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d105      	bne.n	8001270 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001264:	2308      	movs	r3, #8
 8001266:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	611a      	str	r2, [r3, #16]
          break;
 800126e:	e008      	b.n	8001282 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001270:	2308      	movs	r3, #8
 8001272:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	615a      	str	r2, [r3, #20]
          break;
 800127a:	e002      	b.n	8001282 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
          break;
 8001280:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2bff      	cmp	r3, #255	; 0xff
 8001286:	d801      	bhi.n	800128c <HAL_GPIO_Init+0xec>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	e001      	b.n	8001290 <HAL_GPIO_Init+0xf0>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3304      	adds	r3, #4
 8001290:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	2bff      	cmp	r3, #255	; 0xff
 8001296:	d802      	bhi.n	800129e <HAL_GPIO_Init+0xfe>
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_Init+0x104>
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	3b08      	subs	r3, #8
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	210f      	movs	r1, #15
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	401a      	ands	r2, r3
 80012b6:	6a39      	ldr	r1, [r7, #32]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	431a      	orrs	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 8096 	beq.w	80013fe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012d2:	4b59      	ldr	r3, [pc, #356]	; (8001438 <HAL_GPIO_Init+0x298>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	4a58      	ldr	r2, [pc, #352]	; (8001438 <HAL_GPIO_Init+0x298>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6193      	str	r3, [r2, #24]
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <HAL_GPIO_Init+0x298>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012ea:	4a54      	ldr	r2, [pc, #336]	; (800143c <HAL_GPIO_Init+0x29c>)
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	220f      	movs	r2, #15
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4b      	ldr	r2, [pc, #300]	; (8001440 <HAL_GPIO_Init+0x2a0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0x19e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4a      	ldr	r2, [pc, #296]	; (8001444 <HAL_GPIO_Init+0x2a4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00d      	beq.n	800133a <HAL_GPIO_Init+0x19a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a49      	ldr	r2, [pc, #292]	; (8001448 <HAL_GPIO_Init+0x2a8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d007      	beq.n	8001336 <HAL_GPIO_Init+0x196>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a48      	ldr	r2, [pc, #288]	; (800144c <HAL_GPIO_Init+0x2ac>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_GPIO_Init+0x192>
 800132e:	2303      	movs	r3, #3
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x1a0>
 8001332:	2304      	movs	r3, #4
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x1a0>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x1a0>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x1a0>
 800133e:	2300      	movs	r3, #0
 8001340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001350:	493a      	ldr	r1, [pc, #232]	; (800143c <HAL_GPIO_Init+0x29c>)
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d006      	beq.n	8001378 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800136a:	4b39      	ldr	r3, [pc, #228]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4938      	ldr	r1, [pc, #224]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
 8001376:	e006      	b.n	8001386 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	43db      	mvns	r3, r3
 8001380:	4933      	ldr	r1, [pc, #204]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 8001382:	4013      	ands	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001392:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	492e      	ldr	r1, [pc, #184]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
 800139e:	e006      	b.n	80013ae <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	4929      	ldr	r1, [pc, #164]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	4924      	ldr	r1, [pc, #144]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	608b      	str	r3, [r1, #8]
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	491f      	ldr	r1, [pc, #124]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	491a      	ldr	r1, [pc, #104]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	60cb      	str	r3, [r1, #12]
 80013ee:	e006      	b.n	80013fe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	4915      	ldr	r1, [pc, #84]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013fa:	4013      	ands	r3, r2
 80013fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	3301      	adds	r3, #1
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	fa22 f303 	lsr.w	r3, r2, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	f47f aed0 	bne.w	80011b4 <HAL_GPIO_Init+0x14>
  }
}
 8001414:	bf00      	nop
 8001416:	372c      	adds	r7, #44	; 0x2c
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	10210000 	.word	0x10210000
 8001424:	10110000 	.word	0x10110000
 8001428:	10120000 	.word	0x10120000
 800142c:	10310000 	.word	0x10310000
 8001430:	10320000 	.word	0x10320000
 8001434:	10220000 	.word	0x10220000
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000
 8001440:	40010800 	.word	0x40010800
 8001444:	40010c00 	.word	0x40010c00
 8001448:	40011000 	.word	0x40011000
 800144c:	40011400 	.word	0x40011400
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001470:	e003      	b.n	800147a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	611a      	str	r2, [r3, #16]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	041a      	lsls	r2, r3, #16
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43d9      	mvns	r1, r3
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	400b      	ands	r3, r1
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	611a      	str	r2, [r3, #16]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
	...

080014b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d006      	beq.n	80014dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f806 	bl	80014e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40010400 	.word	0x40010400

080014e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e26c      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8087 	beq.w	800162a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800151c:	4b92      	ldr	r3, [pc, #584]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b04      	cmp	r3, #4
 8001526:	d00c      	beq.n	8001542 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001528:	4b8f      	ldr	r3, [pc, #572]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b08      	cmp	r3, #8
 8001532:	d112      	bne.n	800155a <HAL_RCC_OscConfig+0x5e>
 8001534:	4b8c      	ldr	r3, [pc, #560]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001540:	d10b      	bne.n	800155a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d06c      	beq.n	8001628 <HAL_RCC_OscConfig+0x12c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d168      	bne.n	8001628 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e246      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x76>
 8001564:	4b80      	ldr	r3, [pc, #512]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a7f      	ldr	r2, [pc, #508]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800156a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e02e      	b.n	80015d0 <HAL_RCC_OscConfig+0xd4>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x98>
 800157a:	4b7b      	ldr	r3, [pc, #492]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a7a      	ldr	r2, [pc, #488]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b78      	ldr	r3, [pc, #480]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a77      	ldr	r2, [pc, #476]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800158c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e01d      	b.n	80015d0 <HAL_RCC_OscConfig+0xd4>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0xbc>
 800159e:	4b72      	ldr	r3, [pc, #456]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a71      	ldr	r2, [pc, #452]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b6f      	ldr	r3, [pc, #444]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6e      	ldr	r2, [pc, #440]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0xd4>
 80015b8:	4b6b      	ldr	r3, [pc, #428]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a6a      	ldr	r2, [pc, #424]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b68      	ldr	r3, [pc, #416]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a67      	ldr	r2, [pc, #412]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d013      	beq.n	8001600 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff f9c2 	bl	8000960 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff f9be 	bl	8000960 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1fa      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b5d      	ldr	r3, [pc, #372]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0xe4>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff f9ae 	bl	8000960 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff f9aa 	bl	8000960 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1e6      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161a:	4b53      	ldr	r3, [pc, #332]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x10c>
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d063      	beq.n	80016fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001636:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001642:	4b49      	ldr	r3, [pc, #292]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b08      	cmp	r3, #8
 800164c:	d11c      	bne.n	8001688 <HAL_RCC_OscConfig+0x18c>
 800164e:	4b46      	ldr	r3, [pc, #280]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d116      	bne.n	8001688 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	4b43      	ldr	r3, [pc, #268]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <HAL_RCC_OscConfig+0x176>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e1ba      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4939      	ldr	r1, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	e03a      	b.n	80016fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001690:	4b36      	ldr	r3, [pc, #216]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff f963 	bl	8000960 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff f95f 	bl	8000960 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e19b      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4927      	ldr	r1, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
 80016d0:	e015      	b.n	80016fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff f942 	bl	8000960 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e0:	f7ff f93e 	bl	8000960 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e17a      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d03a      	beq.n	8001780 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d019      	beq.n	8001746 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_RCC_OscConfig+0x274>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001718:	f7ff f922 	bl	8000960 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001720:	f7ff f91e 	bl	8000960 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e15a      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800173e:	2001      	movs	r0, #1
 8001740:	f000 fada 	bl	8001cf8 <RCC_Delay>
 8001744:	e01c      	b.n	8001780 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_RCC_OscConfig+0x274>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7ff f908 	bl	8000960 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001752:	e00f      	b.n	8001774 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001754:	f7ff f904 	bl	8000960 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d908      	bls.n	8001774 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e140      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	42420000 	.word	0x42420000
 8001770:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001774:	4b9e      	ldr	r3, [pc, #632]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e9      	bne.n	8001754 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80a6 	beq.w	80018da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001792:	4b97      	ldr	r3, [pc, #604]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10d      	bne.n	80017ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b94      	ldr	r3, [pc, #592]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	4a93      	ldr	r2, [pc, #588]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	61d3      	str	r3, [r2, #28]
 80017aa:	4b91      	ldr	r3, [pc, #580]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b6:	2301      	movs	r3, #1
 80017b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	4b8e      	ldr	r3, [pc, #568]	; (80019f4 <HAL_RCC_OscConfig+0x4f8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d118      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c6:	4b8b      	ldr	r3, [pc, #556]	; (80019f4 <HAL_RCC_OscConfig+0x4f8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a8a      	ldr	r2, [pc, #552]	; (80019f4 <HAL_RCC_OscConfig+0x4f8>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d2:	f7ff f8c5 	bl	8000960 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017da:	f7ff f8c1 	bl	8000960 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b64      	cmp	r3, #100	; 0x64
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e0fd      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ec:	4b81      	ldr	r3, [pc, #516]	; (80019f4 <HAL_RCC_OscConfig+0x4f8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x312>
 8001800:	4b7b      	ldr	r3, [pc, #492]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	4a7a      	ldr	r2, [pc, #488]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6213      	str	r3, [r2, #32]
 800180c:	e02d      	b.n	800186a <HAL_RCC_OscConfig+0x36e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x334>
 8001816:	4b76      	ldr	r3, [pc, #472]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a75      	ldr	r2, [pc, #468]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	6213      	str	r3, [r2, #32]
 8001822:	4b73      	ldr	r3, [pc, #460]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a72      	ldr	r2, [pc, #456]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	f023 0304 	bic.w	r3, r3, #4
 800182c:	6213      	str	r3, [r2, #32]
 800182e:	e01c      	b.n	800186a <HAL_RCC_OscConfig+0x36e>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d10c      	bne.n	8001852 <HAL_RCC_OscConfig+0x356>
 8001838:	4b6d      	ldr	r3, [pc, #436]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a6c      	ldr	r2, [pc, #432]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a69      	ldr	r2, [pc, #420]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	e00b      	b.n	800186a <HAL_RCC_OscConfig+0x36e>
 8001852:	4b67      	ldr	r3, [pc, #412]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a66      	ldr	r2, [pc, #408]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	6213      	str	r3, [r2, #32]
 800185e:	4b64      	ldr	r3, [pc, #400]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a63      	ldr	r2, [pc, #396]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	f023 0304 	bic.w	r3, r3, #4
 8001868:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d015      	beq.n	800189e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff f875 	bl	8000960 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff f871 	bl	8000960 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e0ab      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001890:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0ee      	beq.n	800187a <HAL_RCC_OscConfig+0x37e>
 800189c:	e014      	b.n	80018c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7ff f85f 	bl	8000960 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7ff f85b 	bl	8000960 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e095      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018bc:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1ee      	bne.n	80018a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d105      	bne.n	80018da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ce:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a47      	ldr	r2, [pc, #284]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8081 	beq.w	80019e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e4:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d061      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d146      	bne.n	8001986 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f8:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <HAL_RCC_OscConfig+0x4fc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff f82f 	bl	8000960 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7ff f82b 	bl	8000960 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e067      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001918:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f0      	bne.n	8001906 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192c:	d108      	bne.n	8001940 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800192e:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	492d      	ldr	r1, [pc, #180]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001940:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a19      	ldr	r1, [r3, #32]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	430b      	orrs	r3, r1
 8001952:	4927      	ldr	r1, [pc, #156]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001958:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <HAL_RCC_OscConfig+0x4fc>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7fe ffff 	bl	8000960 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001966:	f7fe fffb 	bl	8000960 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e037      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x46a>
 8001984:	e02f      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_RCC_OscConfig+0x4fc>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7fe ffe8 	bl	8000960 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7fe ffe4 	bl	8000960 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e020      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x498>
 80019b2:	e018      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e013      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40007000 	.word	0x40007000
 80019f8:	42420060 	.word	0x42420060

080019fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0d0      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b6a      	ldr	r3, [pc, #424]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d910      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b67      	ldr	r3, [pc, #412]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 0207 	bic.w	r2, r3, #7
 8001a26:	4965      	ldr	r1, [pc, #404]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0b8      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d020      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a58:	4b59      	ldr	r3, [pc, #356]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4a58      	ldr	r2, [pc, #352]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a70:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7c:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	494d      	ldr	r1, [pc, #308]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d040      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d115      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e07f      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e073      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e06b      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ada:	4b39      	ldr	r3, [pc, #228]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f023 0203 	bic.w	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4936      	ldr	r1, [pc, #216]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aec:	f7fe ff38 	bl	8000960 <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af4:	f7fe ff34 	bl	8000960 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e053      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 020c 	and.w	r2, r3, #12
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d1eb      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d210      	bcs.n	8001b4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 0207 	bic.w	r2, r3, #7
 8001b32:	4922      	ldr	r1, [pc, #136]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e032      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4916      	ldr	r1, [pc, #88]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d009      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b8a:	f000 f821 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001b8e:	4601      	mov	r1, r0
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9c:	5cd3      	ldrb	r3, [r2, r3]
 8001b9e:	fa21 f303 	lsr.w	r3, r1, r3
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1d0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fe96 	bl	80008dc <HAL_InitTick>

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	08002270 	.word	0x08002270
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd0:	b490      	push	{r4, r7}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bd8:	1d3c      	adds	r4, r7, #4
 8001bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x40>
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x46>
 8001c0e:	e02d      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c12:	623b      	str	r3, [r7, #32]
      break;
 8001c14:	e02d      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	0c9b      	lsrs	r3, r3, #18
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c22:	4413      	add	r3, r2
 8001c24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	0c5b      	lsrs	r3, r3, #17
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c42:	4413      	add	r3, r2
 8001c44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c4e:	fb02 f203 	mul.w	r2, r2, r3
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5a:	e004      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	4a0c      	ldr	r2, [pc, #48]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	623b      	str	r3, [r7, #32]
      break;
 8001c6a:	e002      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c6e:	623b      	str	r3, [r7, #32]
      break;
 8001c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c72:	6a3b      	ldr	r3, [r7, #32]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc90      	pop	{r4, r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	0800225c 	.word	0x0800225c
 8001c84:	0800226c 	.word	0x0800226c
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	007a1200 	.word	0x007a1200
 8001c90:	003d0900 	.word	0x003d0900

08001c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c98:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	20000000 	.word	0x20000000

08001ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cac:	f7ff fff2 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cb0:	4601      	mov	r1, r0
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	4a03      	ldr	r2, [pc, #12]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	08002280 	.word	0x08002280

08001cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd4:	f7ff ffde 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cd8:	4601      	mov	r1, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	0adb      	lsrs	r3, r3, #11
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4a03      	ldr	r2, [pc, #12]	; (8001cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce6:	5cd3      	ldrb	r3, [r2, r3]
 8001ce8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08002280 	.word	0x08002280

08001cf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <RCC_Delay+0x34>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <RCC_Delay+0x38>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0a5b      	lsrs	r3, r3, #9
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d14:	bf00      	nop
  }
  while (Delay --);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1e5a      	subs	r2, r3, #1
 8001d1a:	60fa      	str	r2, [r7, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f9      	bne.n	8001d14 <RCC_Delay+0x1c>
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	10624dd3 	.word	0x10624dd3

08001d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e03f      	b.n	8001dc6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7fe fd0e 	bl	800077c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2224      	movs	r2, #36	; 0x24
 8001d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f9a3 	bl	80020c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b08a      	sub	sp, #40	; 0x28
 8001dd2:	af02      	add	r7, sp, #8
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	d17c      	bne.n	8001ee8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <HAL_UART_Transmit+0x2c>
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e075      	b.n	8001eea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_UART_Transmit+0x3e>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e06e      	b.n	8001eea <HAL_UART_Transmit+0x11c>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2221      	movs	r2, #33	; 0x21
 8001e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e22:	f7fe fd9d 	bl	8000960 <HAL_GetTick>
 8001e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	88fa      	ldrh	r2, [r7, #6]
 8001e2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	88fa      	ldrh	r2, [r7, #6]
 8001e32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3c:	d108      	bne.n	8001e50 <HAL_UART_Transmit+0x82>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d104      	bne.n	8001e50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	e003      	b.n	8001e58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001e60:	e02a      	b.n	8001eb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 f8df 	bl	8002030 <UART_WaitOnFlagUntilTimeout>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e036      	b.n	8001eea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10b      	bne.n	8001e9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	3302      	adds	r3, #2
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	e007      	b.n	8001eaa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1cf      	bne.n	8001e62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2140      	movs	r1, #64	; 0x40
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f8af 	bl	8002030 <UART_WaitOnFlagUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e006      	b.n	8001eea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e000      	b.n	8001eea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ee8:	2302      	movs	r3, #2
  }
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b08a      	sub	sp, #40	; 0x28
 8001ef6:	af02      	add	r7, sp, #8
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	4613      	mov	r3, r2
 8001f00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	f040 8089 	bne.w	8002026 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_UART_Receive+0x2e>
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e081      	b.n	8002028 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_UART_Receive+0x40>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e07a      	b.n	8002028 <HAL_UART_Receive+0x136>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2222      	movs	r2, #34	; 0x22
 8001f44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001f48:	f7fe fd0a 	bl	8000960 <HAL_GetTick>
 8001f4c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	88fa      	ldrh	r2, [r7, #6]
 8001f52:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	88fa      	ldrh	r2, [r7, #6]
 8001f58:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f62:	d108      	bne.n	8001f76 <HAL_UART_Receive+0x84>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d104      	bne.n	8001f76 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
 8001f74:	e003      	b.n	8001f7e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001f86:	e043      	b.n	8002010 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2120      	movs	r1, #32
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f84c 	bl	8002030 <UART_WaitOnFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e042      	b.n	8002028 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10c      	bne.n	8001fc2 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	e01f      	b.n	8002002 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fca:	d007      	beq.n	8001fdc <HAL_UART_Receive+0xea>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10a      	bne.n	8001fea <HAL_UART_Receive+0xf8>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d106      	bne.n	8001fea <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	e008      	b.n	8001ffc <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	3301      	adds	r3, #1
 8002000:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1b6      	bne.n	8001f88 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e000      	b.n	8002028 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002026:	2302      	movs	r3, #2
  }
}
 8002028:	4618      	mov	r0, r3
 800202a:	3720      	adds	r7, #32
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002040:	e02c      	b.n	800209c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d028      	beq.n	800209c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <UART_WaitOnFlagUntilTimeout+0x30>
 8002050:	f7fe fc86 	bl	8000960 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	429a      	cmp	r2, r3
 800205e:	d21d      	bcs.n	800209c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800206e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e00f      	b.n	80020bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	4013      	ands	r3, r2
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d0c3      	beq.n	8002042 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020fe:	f023 030c 	bic.w	r3, r3, #12
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	430b      	orrs	r3, r1
 800210a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a2c      	ldr	r2, [pc, #176]	; (80021d8 <UART_SetConfig+0x114>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d103      	bne.n	8002134 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800212c:	f7ff fdd0 	bl	8001cd0 <HAL_RCC_GetPCLK2Freq>
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	e002      	b.n	800213a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002134:	f7ff fdb8 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8002138:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	009a      	lsls	r2, r3, #2
 8002144:	441a      	add	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002150:	4a22      	ldr	r2, [pc, #136]	; (80021dc <UART_SetConfig+0x118>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	0119      	lsls	r1, r3, #4
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	009a      	lsls	r2, r3, #2
 8002164:	441a      	add	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002170:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <UART_SetConfig+0x118>)
 8002172:	fba3 0302 	umull	r0, r3, r3, r2
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2064      	movs	r0, #100	; 0x64
 800217a:	fb00 f303 	mul.w	r3, r0, r3
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	3332      	adds	r3, #50	; 0x32
 8002184:	4a15      	ldr	r2, [pc, #84]	; (80021dc <UART_SetConfig+0x118>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002190:	4419      	add	r1, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	009a      	lsls	r2, r3, #2
 800219c:	441a      	add	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <UART_SetConfig+0x118>)
 80021aa:	fba3 0302 	umull	r0, r3, r3, r2
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2064      	movs	r0, #100	; 0x64
 80021b2:	fb00 f303 	mul.w	r3, r0, r3
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	3332      	adds	r3, #50	; 0x32
 80021bc:	4a07      	ldr	r2, [pc, #28]	; (80021dc <UART_SetConfig+0x118>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	f003 020f 	and.w	r2, r3, #15
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	440a      	add	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40013800 	.word	0x40013800
 80021dc:	51eb851f 	.word	0x51eb851f

080021e0 <__libc_init_array>:
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	2500      	movs	r5, #0
 80021e4:	4e0c      	ldr	r6, [pc, #48]	; (8002218 <__libc_init_array+0x38>)
 80021e6:	4c0d      	ldr	r4, [pc, #52]	; (800221c <__libc_init_array+0x3c>)
 80021e8:	1ba4      	subs	r4, r4, r6
 80021ea:	10a4      	asrs	r4, r4, #2
 80021ec:	42a5      	cmp	r5, r4
 80021ee:	d109      	bne.n	8002204 <__libc_init_array+0x24>
 80021f0:	f000 f822 	bl	8002238 <_init>
 80021f4:	2500      	movs	r5, #0
 80021f6:	4e0a      	ldr	r6, [pc, #40]	; (8002220 <__libc_init_array+0x40>)
 80021f8:	4c0a      	ldr	r4, [pc, #40]	; (8002224 <__libc_init_array+0x44>)
 80021fa:	1ba4      	subs	r4, r4, r6
 80021fc:	10a4      	asrs	r4, r4, #2
 80021fe:	42a5      	cmp	r5, r4
 8002200:	d105      	bne.n	800220e <__libc_init_array+0x2e>
 8002202:	bd70      	pop	{r4, r5, r6, pc}
 8002204:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002208:	4798      	blx	r3
 800220a:	3501      	adds	r5, #1
 800220c:	e7ee      	b.n	80021ec <__libc_init_array+0xc>
 800220e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002212:	4798      	blx	r3
 8002214:	3501      	adds	r5, #1
 8002216:	e7f2      	b.n	80021fe <__libc_init_array+0x1e>
 8002218:	08002288 	.word	0x08002288
 800221c:	08002288 	.word	0x08002288
 8002220:	08002288 	.word	0x08002288
 8002224:	0800228c 	.word	0x0800228c

08002228 <memset>:
 8002228:	4603      	mov	r3, r0
 800222a:	4402      	add	r2, r0
 800222c:	4293      	cmp	r3, r2
 800222e:	d100      	bne.n	8002232 <memset+0xa>
 8002230:	4770      	bx	lr
 8002232:	f803 1b01 	strb.w	r1, [r3], #1
 8002236:	e7f9      	b.n	800222c <memset+0x4>

08002238 <_init>:
 8002238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800223a:	bf00      	nop
 800223c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800223e:	bc08      	pop	{r3}
 8002240:	469e      	mov	lr, r3
 8002242:	4770      	bx	lr

08002244 <_fini>:
 8002244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002246:	bf00      	nop
 8002248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800224a:	bc08      	pop	{r3}
 800224c:	469e      	mov	lr, r3
 800224e:	4770      	bx	lr
